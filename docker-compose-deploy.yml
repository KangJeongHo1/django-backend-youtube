# docker-compose: 도커 컨테이너 관리
# docker-compose.yml: 개발용으로 사용
# docker-compose-deploy.yml: 배포용으로 사용

version: "3.11"

# docker-compose: 프론트엔드, 백엔드, DB, NginX
services:
  app:
    build:
      context: .
    restart: always
    volumes:
      - static-data:/vol/web
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
    depends_on:
      - db
  # 두 번쨰 컨테이너 : Postgres
  db:
    image: postgres:16-alpine # 운영체제, 데이터베이스 등
    # 데이터 저장 공간(./data/db) => (마운트) => /var/lib/postgresql/data
    restart: always
    # docker-compose down
    # 아래의 설정을 통해서 컨테이너가 제거되어도 데이터가 보존된다. 왜? 호스트환경에 저장했기 때문
    volumes: 
      # - postgres-data:/var/lib/postgresql/data
      - ./data/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
  
  proxy:
    build:
      context: ./proxy
    restart: always
    depends_on:
      - app
    ports:
      - 80:8000 # ec2-123-123-123.com/api/v1 (from:to)
      # - 8000:8000 #로컬에서 테스트시
    volumes:
      - static-data:/vol/static

volumes:
  postgres-data:
  static-data: